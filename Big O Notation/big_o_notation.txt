Big O Notation is a way to formalize fuzzy counting.
It allows us to talk formally about how the runtime of an algorithm grows as the inputs grow.
We won't care about the details, only the trends.

Big O Definition
We say that an algorithm is O(f(n)) if the number of simple operations the computer has to do is eventually less than a constant times f(n), as n increases.
f(n) could be linear (f(n) = n)
f(n) could be quadratic (f(n) = n^2)
f(n) could be constant (f(n) = 1)
f(n) could be something entirely different!

An Example: Always 3 operations -> O(1):
function addUpTo(n) {
  return n * (n + 1) / 2;
}

An Example: Number of operations is (eventually) bounded by a multiple of n (say, 10n) -> O(n):
function addUpTo(n) {
  let total = 0;
  for (let i = 1; i <= n; i++) {
    total += i;
  }
  return total;
}

An Example: O(n) operation inside of an O(n) operation, loop inside of loop -> O(n * n) or O(n^2):
function printAllPairs(n) {
  for (var i = 0; i < n; i++) {
    for (var j = 0; j < n; j++) {
      console.log(i, j);
    }
  }
}

Simplifying Big O Expressions
When determining the time complexity of an algorithm, there are some helpful rule of thumbs for big O expressions.
These rules of thumb are consequences of the definition of big O notation.
Instead of O(2n) we use O(n).
Instead of O(500) we use O(1).
Instead of O(13n^2) we use O(n^2).
Instead of O(n + 10) we use O(n).
Instead of O(1000n + 50) we use O(n).
Instead of O(n^2 + 5n + 8) we use O(n^2).

Big O Shorthands
Analyzing complexity with big O can get complicated. There are several rules of thumb that can help. These rules won't ALWAYS work, but are a helpful starting point.
1. Arithmetic operations are constant.
2. Variable assignment is constant.
3. Accessing elements in an array (by index) or object (by key) is constant.
4. In a loop, the the complexity is the length of the loop times the complexity of whatever happens inside of the loop.

Space Complexity
Sometimes you'll hear the term auxiliary space complexity to refer to space required by the algorithm, not including space taken up by the inputs.
Unless otherwise noted, when we talk about space complexity, technically we'll be talking about auxiliary space complexity.

Space Complexity in JS - Rules of Thumb
1. Most primitives (booleans, numbers, undefined, null) are constant space.
2. Strings require O(n) space (where n is the string length).
3. Reference types are generally O(n), where n is the length (for arrays) or the number of keys (for objects).

An Example: We take space complexity into account therefore -> O(1) space:
function sum(arr) {
  let total = 0;
  for (let i = 0; i < arr.length; i++) {
    total += arr[i];
  }
  return total;
}

An Example: We take space complexity into account therefore -> O(1) space:
function logUpTo(n) {
    for (var i = 1; i <= n; i++) {
        console.log(i);
    }
}

An Example: We take space complexity into account therefore -> O(n) space:
function double(arr) {
  let newArr = [];
  for (let i = 0; i < arr.length; i++) {
    newArr.push(2 * arr[i]);
  }
  return newArr;
}

An Example: We take space complexity into account therefore -> O(1) space:
function logAtMost10(n) {
    for (var i = 1; i <= Math.min(n, 10); i++) {
        console.log(i);
    }
}

