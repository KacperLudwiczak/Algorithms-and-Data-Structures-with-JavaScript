TREE
A data structure that consists of nodes in a parent / child relationship

Lists - linear
Trees - nonlinear

TREE TERMINOLOGY:
Root - The top node in a tree.
Child - A node directly connected to another node when moving away from the Root.
Parent - The converse notion of a child.
Siblings - A group of nodes with the same parent.
Leaf - A node with no children.
Edge - The connection between one node and another.

TREES:
HTML DOM
Network Routing
Abstract Syntax Tree
Artificial Intelligence
Folders in Operating Systems
Computer File Systems

KINDS OF TREES:
Trees
Binary Trees
Binary Search Trees

Visual Binary Search Trees:
https://visualgo.net/en/bst?slide=1

BINARY TREES:
Decision Trees (true / false)
Database Indicies
Sorting Algorithms

HOW BINARY SEARCH TREES WORK:
Every parent node has at most two children
Every node to the left of a parent node is always less than the parent
Every node to the right of a parent node is always greater than the parent

INSERTING A NODE STEPS - Iteratively or Recursively:
1. Create a new node
2. Starting at the root
    1. Check if there is a root, if not - the root now becomes that new node!
    2. If there is a root, check if the value of the new node is greater than or less than the value of the root
    3. If it is greater 
        1. Check to see if there is a node to the right
            1. If there is, move to that node and repeat these steps
            2. If there is not, add that node as the right property
    4. If it is less
        1. Check to see if there is a node to the left
            1. If there is, move to that node and repeat these steps
            2. If there is not, add that node as the left property

Finding a Node in a BST Steps - Iteratively or Recursively:
1. Starting at the root
    1. Check if there is a root, if not - we're done searching!
    2. If there is a root, check if the value of the new node is the value we are looking for. If we found it, we're done!
    3. If not, check to see if the value is greater than or less than the value of the root
    4. If it is greater 
        1. Check to see if there is a node to the right
            1. If there is, move to that node and repeat these steps
            2. If there is not, we're done searching!
    5. If it is less
        1. Check to see if there is a node to the left
            1. If there is, move to that node and repeat these steps
            2. If there is not, we're done searching!

Big O of BST:
Insertion - O(log n)
Searching - O(log n)