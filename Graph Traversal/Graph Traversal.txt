GRAPH TRAVERSAL USES:
Peer to peer networking.
Web crawlers.
Finding "closest" matches/recommendations.
Shortest path problems:
    GPS Navigation.
    Solving mazes.
    AI (shortest path to win the game).

DEPTH FIRST
Explore as far as possible down one branch before "backtracking".

DFS PSEUDOCODE - Recursive:
 DFS(vertex):
    if vertex is empty
        return (this is base case)
    add vertex to results list
    mark vertex as visited
    for each neighbor in vertex's neighbors:
       if neighbor is not visited:
          recursively call DFS on neighbor

DEPTH FIRST TRAVERSAL PSEUDOCODE - Recursive:
1. The function should accept a starting node
2. Create a list to store the end result, to be returned at the very end
3. Create an object to store visited vertices
4. Create a helper function which accepts a vertex
    1. The helper function should return early if the vertex is empty
    2. The helper function should place the vertex it accepts into the visited object and push that vertex into the result array.
    3. Loop over all of the values in the adjacencyList for that vertex
    4. If any of those values have not been visited, recursively invoke the helper function with that vertex
5. Invoke the helper function with the starting vertex
6. Return the result array

DFS PSEUDOCODE - Iterative:
DFS-iterative(start):
    let S be a stack
    S.push(start)
    while S is not empty
        vertex = S.pop()
        if vertex is not labeled as discovered:
            visit vertex (add to result list)
            label vertex as discovered
            for each of vertex's neighbors, N do 
                S.push(N)

DEPTH FIRST TRAVERSAL - Iterative:
1. The function should accept a starting node
2. Create a stack to help use keep track of vertices (use a list/array)
3. Create a list to store the end result, to be returned at the very end
4. Create an object to store visited vertices
5. Add the starting vertex to the stack, and mark it visited
6. While the stack has something in it:
    1. Pop the next vertex from the stack
    2. If that vertex hasn't been visited yet:
        1. â€‹Mark it as visited
        2. Add it to the result list
        3. Push all of its neighbors into the stack
7. Return the result array

BREADTH FIRST
Visit neighbors at current depth first.

BREADTH FIRST
1. This function should accept a starting vertex
2. Create a queue (you can use an array) and place the starting vertex in it
3. Create an array to store the nodes visited
4. Create an object to store nodes visited
6. Mark the starting vertex as visited
7. Loop as long as there is anything in the queue
8. Remove the first vertex from the queue and push it into the array that stores nodes visited
9. Loop over each vertex in the adjacency list for the vertex you are visiting.
10. If it is not inside the object that stores nodes visited, mark it as visited and enqueue that vertex
11. Once you have finished looping, return the array of visited nodes