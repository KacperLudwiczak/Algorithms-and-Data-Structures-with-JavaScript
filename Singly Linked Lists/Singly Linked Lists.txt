Linked list
A data structure that contains a head, tail and length property.
Linked Lists consist of nodes, and each node has a value and a pointer to another node or null.

Visual Lists:
https://visualgo.net/en/list

Comparisons Lists with Arrays:
Lists:
    Do not have indexes!
    Connected via nodes with a next pointer.
    Random access is not allowed.
Arrays:
    Indexed in order!
    Insertion and deletion can be expensive.
    Can quickly be accessed at a specific index.

Pushing:
Adding a new node to the end of the Linked List!

Pushing pseudocode:
1. This function should accept a value
2. Create a new node using the value passed to the function
3. If there is no head property on the list, set the head and tail to be the newly created node
4. Otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node
5. Increment the length by one
6. Return the linked list

Popping
Removing a node from the end of the Linked List!

Popping pseudocode:
1. If there are no nodes in the list, return undefined
2. Loop through the list until you reach the tail
3. Set the next property of the 2nd to last node to be null
4. Set the tail to be the 2nd to last node
5. Decrement the length of the list by 1
6. Return the value of the node removed

Shifting
Removing a new node from the beginning of the Linked List!

Shifting pseudocode:
1. If there are no nodes, return undefined
2. Store the current head property in a variable
3. Set the head property to be the current head's next property
4. Decrement the length by 1
5. Return the value of the node removed

Unshifting
Adding a new node to the beginning of the Linked List!

Unshifting pseudocode:
1. This function should accept a value
2. Create a new node using the value passed to the function
3. If there is no head property on the list, set the head and tail to be the newly created node
4. Otherwise set the newly created node's next property to be the current head property on the list
5. Set the head property on the list to be that newly created node
6. Increment the length of the list by 1
7. Return the linked list

Get
Retrieving a node by it's position in the Linked List!

Get pseudocode:
1. This function should accept an index
2. If the index is less than zero or greater than or equal to the length of the list, return null
3. Loop through the list until you reach the index and return the node at that specific index

Set
Changing the value of a node based on it's position in the Linked List

Set pseudocode:
1. This function should accept an index and a value
2. Use your get function to find the specific node.
3. If the node is not found, return false
4. If the node is found, set the value of that node to be the value passed to the function and return true

Insert
Adding a node to the Linked List at a specific position

Insert pseudocode:
If the index is less than zero or greater than the length, return false
If the index is the same as the length, push a new node to the end of the list
If the index is 0, unshift a new node to the start of the list
Otherwise, using the get method, access the node at the index - 1
Set the next property on that node to be the new node
Set the next property on the new node to be the previous next
Increment the length
Return true

Remove
Removing a node from the Linked List at a specific position

Remove pseudocode:
If the index is less than zero or greater than the length, return undefined
If the index is the same as the length-1, pop
If the index is 0, shift
Otherwise, using the get method, access the node at the index - 1
Set the next property on that node to be the next of the next node
Decrement the length
Return the value of the node removed

Reverse
Reversing the Linked List in place!

Head             Tail
13 -> 27 -> 32 -> 71

Tail             Head
13 <- 27 <- 32 <- 71

Reverse pseudocode:
Create a variable called node and initialize it to the head property
Swap the head and tail
Create a variable called next
Create a variable called prev
Loop through the list
Set next to be the next property on whatever node is
Set the next property on the node to be whatever prev is
Set prev to be the value of the node variable
Set the node variable to be the value of the next variable
Once you have finished looping, return the list

Big O of Singly Linked Lists
Insertion - O(1)
Removal - It depends.... O(1) or O(N)
Searching - O(N)
Access - O(N)

RECAP:
Singly Linked Lists are an excellent alternative to arrays when insertion and deletion at the beginning are frequently required.
Arrays contain a built in index whereas Linked Lists do not.
The idea of a list data structure that consists of nodes is the foundation for other data structures like Stacks and Queues.