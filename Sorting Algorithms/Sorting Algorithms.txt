Sorting is the process of rearranging the items in a collection (e.g. an array) so that the items are in some kind of order.

Examples:
Sorting numbers from smallest to largest.
Sorting names alphabetically.
Sorting movies based on release year.
Sorting movies based on revenue.

Sorting Algorithms Animations:
https://www.toptal.com/developers/sorting-algorithms

Visual Sorting:
https://visualgo.net/en/sorting

Why do we need to learn this?
Sorting is an incredibly common task, so it's good to know how it works.
There are many different ways to sort things, and different techniques have their own advantages and disadvantages.
Sorting sometimes has quirks, so it's good to understand how to navigate them.

JavaScript Sort Documentation:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort

Telling JavaScript how to sort:
The built-in sort method accepts an optional comparator function.
You can use this comparator function to tell JavaScript how you want it to sort.
The comparator looks at pairs of elements (a and b), determines their sort order based on the return value.
    If it returns a negative number, a should come before b.
    If it returns a positive number, a should come after b.
    If it returns 0, a and b are the same as far as the sort is concerned.

Examples:
function numberCompare(num1, num2) {
  return num1 - num2;
}
[ 6, 4, 15, 10 ].sort(numberCompare); // [ 4, 6, 10, 15 ]

function compareByLen(str1, str2) {
  return str1.length - str2.length;
}
[ "Steele", "Colt", "Data Structures", "Algorithms" ].sort(compareByLen); // [ "Colt", "Steele", "Algorithms", "Data Structures" ]

Before we sort, we must swap!
Many sorting algorithms involve some type of swapping functionality (e.g. swapping to numbers to put them in order)
// ES5
function swap(arr, idx1, idx2) {
  var temp = arr[idx1];
  arr[idx1] = arr[idx2];
  arr[idx2] = temp;
}
// ES2015
const swap = (arr, idx1, idx2) => {
  [arr[idx1],arr[idx2]] = [arr[idx2],arr[idx1]];
}


BUBBLE SORT
A sorting algorithm where the largest values bubble up to the top!

Example:
    ^
[ 6, 3, 4, 5] - 6 compare to 3, it is larger, 6 goes after 3

       ^
[ 3, 6, 4, 5 ] - 6 compare to 4, it is larger, 6 goes after 4

          ^
[ 3, 4, 6, 5 ] - 6 compare to 5, it is larger, 6 goes after 5

[ 3, 4, 5, 6 ] - 6 is now in its sorted position!

BubbleSort Pseudocode:
1. Start looping from with a variable called i the end of the array towards the beginning
2. Start an inner loop with a variable called j from the beginning until i - 1
3. If arr[j] is greater than arr[j+1], swap those two values!
4. Return the sorted array


SELECTION SORT
Similar to bubble sort, but instead of first placing large values into sorted position, it places small values into sorted position.

Example:
    ^
[ 6, 3, 4, 1, 2] - 3 compare to 6, it is smaller, 3 is our minimum

       ^
[ 6, 3, 4, 1, 2] - 3 compare to 4, it is smaller, 3 is our minimum

           ^ 
[ 6, 3, 4, 1, 2] - 3 compare to 1, it is larger, 1 is our minimum

             ^ 
[ 6, 3, 4, 1, 2] - 1 compare to 2, it is smaller, 1 is our minimum

[ 1, 3, 4, 6, 2] - we swap 6 (the element we started with) and 1 (the element that became our minimum), 
and 1 is now at the beginning, and the loop continues...

Selection Sort Pseudocode:
1. Store the first element as the smallest value you've seen so far.
2. Compare this item to the next item in the array until you find a smaller number.
3. If a smaller number is found, designate that smaller number to be the new "minimum" and continue until the end of the array.
4. If the "minimum" is not the value (index) you initially began with, swap the two values.
5. Repeat this with the next element until the array is sorted.


INSERTION SORT
Builds up the sort by gradually creating a larger left half which is always sorted.

Example:
    ^
[ 5, 3, 4, 1, 2 ] - we sort the part of 5 and 3
        ^
[ 3, 5, 4, 1, 2 ] - we sort 4, it goes between 5 and 3
           ^
[ 3, 4, 5, 1, 2 ] - we sort 1, it goes at the beginning
              ^
[ 1, 3, 4, 5, 2 ] - we sort 2, it goes after 1

Insertion Sort Pseudocode: 
1. Start by picking the second element in the array
2. Now compare the second element with the one before it and swap if necessary.
3. Continue to the next element and if it is in the incorrect order, iterate through the sorted portion (i.e. the left side) to place the element in the correct place.
4. Repeat until the array is sorted.