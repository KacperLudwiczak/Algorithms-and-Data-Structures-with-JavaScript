How do we search?
Given an array, the simplest way to search for an value is to look at every element in the array and check if it's the value we want.

There are many different search methods on arrays in JavaScript:
indexOf
includes
find
findIndex


Linear Search
Let's search for 12:
[ 5, 8, 1, 20, 12, 3, 12 ]
  ^                         no
     ^                      no
        ^                   no
           ^                no
               ^            yes


Linear Search Pseudocode:
1. This function accepts an array and a value
2. Loop through the array and check if the current array element is equal to the value
3. If it is, return the index at which the element is found
4. If the value is never found, return -1

Linear Search - BIG O, scenarios:
Worst - O(n)
Average - O(n)
Best - O(1) // It rarely happens


Binary Search
Binary search is a much faster form of search.
Rather than eliminating one element at a time, you can eliminate half of the remaining elements at a time.
Binary search only works on sorted arrays!

Divide and Conquer
Let's search for 15:
[ 1, 3, 4, 6, 8, 9, 11, 12, 15, 16, 17, 18, 19 ]
  ^                                               left
                    ^                             too small
                                             ^    right
[ 1, 3, 4, 6, 8, 9, 11, 12, 15, 16, 17, 18, 19 ]
                         ^                        left
                                     ^            too big
                                             ^    right
[ 1, 3, 4, 6, 8, 9, 11, 12, 15, 16, 17, 18, 19 ]
                         ^                        left
                             ^                    15
                                 ^                right

Binary Search Pseudocode:
1. This function accepts a sorted array and a value
2. Create a left pointer at the start of the array, and a right pointer at the end of the array
3. While the left pointer comes before the right pointer:
    1. Create a pointer in the middle -> var middle = Math.floor((start + end) / 2)
    2. If you find the value you want, return the index
    3. If the value is too small, move the left pointer up
    4. If the value is too large, move the right pointer down
4. If you never find the value, return -1

Binary Search - BIG O, scenarios:
O(log n) - Worst and Average Case
O(1) - Best Case

Suppose we're searching for 13:
[2,4,5,9,11,14,15,19,21,25,28,30,50,52,60,63]
[2,4,5,9,11,14,15] - step 1
[11,14,15] - step 2
[11] - step 3
[] - step 4
NOT HERE - 16 elements = 4 "steps"

To add another "step", we need to double the number of elements
Let's search for 32:
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35]
[17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35] - step 1
[25,26,27,28,29,30,32,35] - step 2
[29,30,32,35] - step 3
[32,35] - step 4
[32] - step 5
32 elements = 5 "steps" (worst case)


Naive String Search
Suppose you want to count the number of times a smaller string appears in a longer string.
A straightforward approach involves checking pairs of characters individually.

Example of Naive String Search:
We have long string "wowomgzomg" and short string "omg". 
We want to count the number of times the short string appears in the long string. 

wowomgzomg
o           no
 o          yes
 om         no
  o         no
   o        yes
   om       yes
   omg      yes - one find
    o       no
     o      no
      o     no
       o    yes
       om   yes
       omg  yes - second find


Naive String Search Pseudocode:
1. Loop over the longer string
2. Loop over the shorter string
3. If the characters don't match, break out of the inner loop
4. If the characters do match, keep going
5. If you complete the inner loop and find a match, increment the count of matches
6. Return the count