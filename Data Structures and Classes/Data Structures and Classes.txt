Data structures are collections of values, the relationships among them, and the functions or operations that can be applied to the data.
Different data structures excel at different things.  Some are highly specialized, while others (like arrays) are more generally used.

DATA STRUCTURES:
Binary Search Trees,
Binary Heaps,
Stacks,
Queues,
Singly Linked Lists,
Doubly Linked Lists,
Directed Graphs,
Undirected Unweighted Graphs,
Hash Tables.

Use cases:
Working with map/location data?
Use a graph!
Need an ordered list with fast inserts/removals at the beginning and end?
Use a linked list!
Web scraping nested HTML?
Use a tree!
Need to write a scheduler?
Use a binary heap!

Classes:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes

Class is a blueprint for creating objects with pre-defined properties and methods.
We're going to implement data structures as classes!

The method to create new objects must be called constructor.
The class keyword creates a constant, so you can not redefine it. 
Syntax:
class Student {
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

To create objects from classes - We use the new keyword:
let firstStudent = new Student("Colt", "Steele");
let secondStudent = new Student("Blue", "Steele");

Instance Methods:
class Student {
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    fullName(){
        return `Your full name is ${this.firstName} ${this.lastName}`;
    }
}
let firstStudent = new Student("Kacper", "Lud");
firstStudent.fullName() // Output: "Kacper Lud"

Class Methods (static):
class Student {
    constructor(firstName, lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }
    
    fullName(){
        return `Your full name is ${this.firstName} ${this.lastName}`;
    }
    
    static enrollStudents(...students){
        // maybe send an email here
    }
}
let firstStudent = new Student("Kacper", "Lud",1);
let secondStudent = new Student("Justi", "Koz",2);
Student.enrollStudents([firstStudent, secondStudent])

We will be using the constructor and instance methods quite a bit!
We will almost never be using static methods.
class DataStructure(){
    constructor(){
        // what default properties should it have?
    }
    someInstanceMethod(){
        // what should each object created from this class be able to do?
    }
}

One gotcha with `this`
Inside all of our instance methods and constructor, 
the keyword `this` refers to the object created from that class (also known as an instance).

Recap:
Classes are blueprints that when created make objects known as instances.
Classes are created with the new keyword.
The constructor function is a special function that gets run when the class is instantiated.
Instance methods can be added to classes similar to methods in objects.
Class methods can be added using the static keyword.